% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_sample_size.R
\name{find_sample_size}
\alias{find_sample_size}
\title{Find Optimal Sample Size}
\usage{
find_sample_size(
  np = 0,
  ni = 2000,
  dsearch = 1,
  power_calc_fn,
  proportion_vector = 1,
  pwr,
  small_iterations = NULL,
  large_iterations = NULL,
  ...
)
}
\arguments{
\item{np}{Integer. Lower bound of the sample size search range (default: 0).}

\item{ni}{Integer. Upper bound of the sample size search range (default: 2000).}

\item{dsearch}{Numeric. Precision of the binary search. Larger values lead to finer resolution and more iterations (default: 1).}

\item{power_calc_fn}{Function. The power-calculating function within the environment that the user should already have.
The results should be in a named list with the power value listed under power "return(list(power=final_power))".}

\item{proportion_vector}{Numeric vector. Proportion of individuals allocated to each basket/arm in multi-arm trials (default: 1).}

\item{pwr}{Numeric. Nominal/expected power (e.g., 0.8 for 80\% power).}

\item{small_iterations}{Integer. Specifies the number of simulations to use in the initial (coarse) binary search if a simulation-based power function is provided.}

\item{large_iterations}{Integer. Specifies the number of simulations to use in the subsequent (precise) search if a simulation-based power function is provided.}
}
\value{
Numeric. The optimal sample size.
}
\description{
This function uses a binary search algorithm to find the optimal sample size required to achieve a specified power
for a statistical test. The function takes the optimal sample size from the range of sample size values provided by the binary
search helper function.
}
\examples{
\dontrun{
find_sample_size(
  np = 10,
  ni = 1000,
  dsearch = 5,
  power_calc_fn = function(total_individuals, ...) {
    return(list(power = 0.8))
  },
  proportion_vector = 1,
  pwr = 0.8
)}
}
\author{
Desmond Zeya Chen (Contact via GitHub Issues)
}
